server {
    listen 80;
    server_name "${DOMAIN}";

    # Uncomment to redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

# Uncomment this section after you have acquired a SSL Certificate
server {
    root /usr/share/nginx/html;
    listen 443 ssl http2;
    server_name ${DOMAIN};
    ssl_certificate ${CERTIFICATE_PATH}/fullchain.pem;
    ssl_certificate_key ${CERTIFICATE_PATH}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    add_header Strict-Transport-Security "max-age=31536000" always;
    ssl_trusted_certificate ${CERTIFICATE_PATH}/chain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security / XSS Mitigation Headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    add_header Content-Security-Policy "default-src https: data: blob:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

    location /api-internal {
        proxy_pass http://backend:8080;
    }
    location /auth {
        proxy_pass http://backend:8080;
    }
    location / {
        try_files $uri /index.html =404;
    }
}

